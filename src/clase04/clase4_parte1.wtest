import atencionDeAnimales.*

describe "Parte 1: Vacas" {
	const vaca = new Vaca(peso = 150)
	test "Cuando una vaca come, aumenta de peso en relación a lo que comió" {
		const pesoPrevio = vaca.peso()
		vaca.comer(6)
		assert.equals(pesoPrevio + 2, vaca.peso())
	}
	test "Cuando una vaca come, le da sed" {
		vaca.tieneSed(false)
		vaca.comer(1)
		assert.that(vaca.tieneSed())
	}
	test "Cuando una vaca bebe, sele va la sed"{
		vaca.tieneSed(true)
		vaca.beber()
		assert.notThat(vaca.tieneSed())
	}
	test "Cuando una vaca bebe, pierde 500g de peso" {
		const pesoPrevio = vaca.peso()
		vaca.beber()
		assert.equals(pesoPrevio - 0.5, vaca.peso())
	}
	test "Una vaca tiene hambre si pesa menos de 200kg" {
		vaca.peso(199)
		assert.that(vaca.tieneHambre())
	}
	test "Una vaca no tiene hambre si pesa al menos 200kg" {
		vaca.peso(200)
		assert.notThat(vaca.tieneHambre())
	}
}

describe "Parte 1: Cerdos" {
	const cerdo = new Cerdo(peso = 75)
	
	method alimentarNVeces(veces){
		veces.times {n=> cerdo.comer(1)}
	}
	
	test "Cuando un cerdo come suficiente, aumenta de peso"{
		const pesoPrevio = cerdo.peso()
		cerdo.comer(0.5)
		assert.equals(pesoPrevio + 0.3, cerdo.peso())
	}
	test "Cuando un cerdo come poco, no aumenta de peso" {
		const pesoPrevio = cerdo.peso()
		cerdo.comer(0.1)
		assert.equals(pesoPrevio, cerdo.peso())
	}
	test "Cuando un cerdo come más de 1kg, se le va el hambre" {
		cerdo.tieneHambre(true)
		cerdo.comer(1.5)
		assert.notThat(cerdo.tieneHambre())
	}
	test "Cuando un cerdo come menos de 1kg, no se le va el hambre" {
		cerdo.tieneHambre(true)
		cerdo.comer(0.8)
		assert.that(cerdo.tieneHambre())
	}
	
	test "Un cerdo tiene sed si comió más de 3 veces seguidas, sin beber" {
		self.alimentarNVeces(4)
		assert.that(cerdo.tieneSed())
	}
	test "Un cerdo no tiene sed si bebió entre las últimas comidas" {
		self.alimentarNVeces(2)
		cerdo.beber()
		self.alimentarNVeces(2)
		assert.notThat(cerdo.tieneSed())
	}
	test "Cuando un cerdo bebe, le da hambre" {
		cerdo.tieneHambre(false)
		cerdo.beber()
		assert.that(cerdo.tieneHambre())
	}
}

describe "Parte 1: Gallinas" {
	const gallina = new Gallina()
	const pesoDeGallina = 4
	
	method assertLaGallinaNoCambiaLuegoDe(algoParaHacer){
		algoParaHacer.apply()
		assert.equals(pesoDeGallina, gallina.peso())
		assert.that(gallina.tieneHambre())
		assert.notThat(gallina.tieneSed())
	}
	
	test "Las gallinas pesan 4kg" {
		assert.equals(pesoDeGallina, gallina.peso())
	}
	test "Las gallinas siempre tienen hambre" {
		assert.that(gallina.tieneHambre())
	}
	test "Las gallinas nunca tienen sed" {
		assert.notThat(gallina.tieneSed())
	}
	test "No se observan cambios cuando una gallina come" {
		self.assertLaGallinaNoCambiaLuegoDe {gallina.comer(2)}
	}
	test "No se observan cambios cuando una gallina bebe" {
		self.assertLaGallinaNoCambiaLuegoDe {gallina.beber()}
	}
}

describe "Parte 1: Bebederos" {
	const bebedero = new Bebedero()
	// Uso a la vaca porque es un animal simple en este aspecto
	const animalSediento = new Vaca(peso = 150, tieneSed = true)
	const animalSinSed = new Vaca(peso = 150, tieneSed = false)
	
	test "Un bebedero es útil para atender animales con sed" {
		assert.that(bebedero.esUtilParaAtender(animalSediento))
	}
	test "Un bebedero no es útil para atender animales que no tienen sed" {
		assert.notThat(bebedero.esUtilParaAtender(animalSinSed))
	}
	
	test "Cuando un animal se atiende en un bebedero, le da de beber" {
		bebedero.atender(animalSediento)
		assert.notThat(animalSediento.tieneSed())
	}
	test "Se puede atender a un animal incluso si no está sediento" {
		bebedero.atender(animalSinSed)
		assert.notThat(animalSinSed.tieneSed())
	}
}

describe "Parte 1: Comederos" {
	const comedero = new Comedero(pesoMaximoSoportado = 100, racion = 5)
	// Uso al cerdo porque es un animal relativamente simple en este aspecto
	const animalHambriento = new Cerdo(peso = 80, tieneHambre = true)
	const animalPesado = new Cerdo(peso = 110, tieneHambre = true)
	const animalSinHambre = new Cerdo(peso = 80, tieneHambre = false)
	
	test "Un comedero es útil para atender un animal hambriento con peso aceptable" {
		assert.that(comedero.esUtilParaAtender(animalHambriento))
	}
	test "Un comedero no es útil para atender un animal hambriento demasiado pesado" {
		assert.notThat(comedero.esUtilParaAtender(animalPesado))
	}
	test "Un comedero no es útil para atender un animal que no está hambriento" {
		assert.notThat(comedero.esUtilParaAtender(animalSinHambre))
	}
	
	test "Cuando un animal se atiende en un comedero, le da de comer la ración de comida" {
		const pesoPrevio = animalHambriento.peso()
	    comedero.racion(2)
		comedero.atender(animalHambriento)
		// +1.8 por la regla de los cerdos
		assert.equals(pesoPrevio + 1.8, animalHambriento.peso())
	}
	// Sólo para confirmar que esto no explota
	test "Es posible atender animales que no tienen hambre" {
		comedero.atender(animalSinHambre)
		assert.notThat(animalSinHambre.tieneHambre())
	}
	
	// Esto sí debería explotar
	test "No es posible atender animales que superan el peso máximo del comedero" {
		assert.throwsException({ comedero.atender(animalPesado) })
	}
}